#!/usr/bin/env node
'use strict';

const process = require('process');
const config  = require('./lib/config');
const blocks  = require('./lib/blocks');
const clients = require('./lib/clients');


class Bar {
  constructor() {
    this.blocks = [
      new blocks.StaticBlock(`%{F${config.get('cFG')}}`),
      new blocks.StaticBlock(`%{U${config.get('cUL')}}`),
      new blocks.StaticBlock(`%{B${config.get('cBG')}}`),
      new blocks.StaticBlock('%{l}'),
      new blocks.WorkspaceBlock(),
      new blocks.StaticBlock('%{c}'),
      new blocks.CurrentSongBlock(),
      new blocks.StaticBlock('%{r}'),
      new blocks.BatteryBlock(),
      new blocks.StaticBlock('・'),
      new blocks.PlayStatusBlock(),
      new blocks.VolumeBlock(),
      new blocks.StaticBlock('・'),
      new blocks.SsidBlock(),
      new blocks.StaticBlock('・'),
      new blocks.DatetimeBlock(),
    ];

    // Re-render on every update
    this.blocks.forEach((block) => {
      block.on('update', this.render.bind(this));
    });

    this.render();
  }

  // Update all blocks
  update() {
    this.blocks.forEach((block) => {
      block.update();
    });
  }

  // Print the output of all blocks concatenated
  render() {
    console.log(this.blocks.map((block) => {
      return block.query();
    }).join(''));
  }
}

// Do configuration from command line options
let argv = require('minimist')(process.argv.slice(2), {
  alias: {
    F: 'cFG',
    U: 'cUL',
    B: 'cBG',
    urgent: 'cUrgent',
    accent: 'cAccent',
  }
});
delete argv._;
config.update(argv);

let bar = new Bar();

// Update all blocks on lid open
clients.acpi.on('button/lid', function(_, state) {
  if (state === 'open')
    bar.update();
});

// vim: ft=javascript

